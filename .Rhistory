setProgress(value = value)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_loc("ad.bib",original = "Database")
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_loc <- function(path,input_url=NULL,original){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = nrow(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
pb$tick()
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
value <-  match(x,dois)
setProgress(value = value)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_loc("ad.bib",original = "Database")
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_loc <- function(path,input_url=NULL,original){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = 20)
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
pb$tick()
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
value <-  match(x,dois)
setProgress(value = value)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_loc("ad.bib",original = "Database")
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_loc <- function(path,input_url=NULL,original){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = length(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
pb$tick()
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
value <-  match(x,dois)
setProgress(value = value)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_loc("ad.bib",original = "Database")
read_bib <- function(path,original){
if (original=="Database"){
options(warn = -1)
data <- revtools::read_bibliography(path) %>% dplyr::select(.,title,doi) %>%
tidyr::separate(.,doi,into = c("dois","others"),sep = "Early") %>%
dplyr::mutate(.,dois = ifelse(is.na(dois)!=TRUE,paste0("https://doi.org/",dois),NA))
}else{
data <- read.table(path,stringsAsFactors = FALSE)
colnames(data)[1] <- "dois"
}
return(data)
}
path="ad.bib"
original="Database"
data_bib <- read_bib(path,original)
dois <- data_bib$dois
url <- "http://sci-hub.se"
pb <- progress::progress_bar$new(total = length(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
pb$tick()
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
value <-  match(x,dois)
setProgress(value = value)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
View(loc_get)
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
loc_get$error
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_loc <- function(path,input_url=NULL,original,app="R"){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = length(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
pb$tick()
if(app="R"){
value <-  match(x,dois)
setProgress(value = value)
}
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_loc <- function(path,input_url=NULL,original,app="R"){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = length(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
pb$tick()
if(app=="R"){
value <-  match(x,dois)
setProgress(value = value)
}
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_loc("ad.bib",original = "Database")
data_bib <- read_bib(path,original)
dois <- data_bib$dois
pb <- progress::progress_bar$new(total = length(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
pb$tick()
if(app=="R"){
value <-  match(x,dois)
setProgress(value = value)
}
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_down <- function(path,input_url=NULL,original){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = length(dois))
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
pb$tick()
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_down("ad.bib",original = "Database")
#' Download paper from sci hub
#'
#' @param path The file path of the input data
#'
#' @param input_url sci url, if not offered by the user, sci-hub.se will be used
#'
#' @param original The source of your input data,  "Database" means the data is from a database e.g. web of science. "Dois" means you collected dois by your self as a text file.
#'
#' @export
#'
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom purrr map2
#' @importFrom purrr safely
#' @importFrom purrr map_dbl
#' @importFrom purrr map
#' @importFrom purrr discard
sci_down <- function(path,input_url=NULL,original){
data_bib <- read_bib(path,original)
dois <- data_bib$dois
if (is.null(input_url)){
url <- "http://sci-hub.se"
}else{
url <- input_url
}
pb <- progress::progress_bar$new(total = length(dois),clear = FALSE)
added <- round(runif(1,min=10000,max=99999))
dir_name <- paste0("paper",added)
dir.create(file.path(dir_name))
loc_get <- purrr::map2(dois,dir_name,purrr::safely(function(x,y) {
pb$tick()
data1 <- sci_down_orginal(url=url,dois=x,dir=y)
Sys.sleep(2)
return(data1)
},
otherwise = message("Some links may not work, please check them and download manually"))) %>%
purrr::transpose()
success <- purrr::map_dbl(loc_get$error,function(x){
note <- c()
if (is.null(x)){
failure=1
}else{
failure=0
}
rbind(note,failure)
})
data <- purrr::map(loc_get,~ purrr::discard(.x, is.null))$result %>% unlist() %>% as.data.frame(.,stringsAsFactors = FALSE)
locs <-  data$. %>% stringr::str_split(., "#") %>% purrr::map_chr(.,function(x)`[[`(x,1) %>% `[`(.,1))
if(original=="Database") {
index <- data.frame(title=data_bib$title,dois=data_bib$dois,success)
}else if(original=="Dois"){
index <- data.frame(dois=dois,success)
}
output <- list(locs=locs,index=index)
return(output)
}
sci_down("ad.bib",original = "Database")
golem::detach_all_attached()
remove.packages("paperdigger", lib="~/R/win-library/3.6")
devtools::install_github("KiayangQ/paperdigger")
paperdigger::paper_dig()
golem::detach_all_attached()
golem::document_and_reload()
remove.packages("paperdigger", lib="~/R/win-library/3.6")
devtools::install_github("KiayangQ/paperdigger")
library(paperdigger)
paper_dig()
getwd()
setwd("C:/Users/VULCAN/Desktop")
sci_down("savedrecs.bib",original = "Database")
setwd("E:/new/R script/SHINNY/project_paper_digger/paperdigger")
